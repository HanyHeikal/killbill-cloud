---
- name: ensure KPM install dir exists
  become: true
  file:
    path: "{{ kpm_install_dir }}"
    state: directory
  tags: kpm

- name: download kpm release metadata
  uri:
    url: "{{ nexus_url }}/content/repositories/{{ nexus_repository }}/org/kill-bill/billing/installer/kpm/maven-metadata.xml"
    return_content: yes
  register: kpm_metadata
  when: kpm_version is undefined
  tags: kpm

# We don't use the xml module to avoid a dependency on lxml
- name: set kpm_version
  set_fact:
    kpm_version: "{{ kpm_metadata.content | regex_search('<release>(.*)</release>', '\\1') | first }}"
  when: kpm_version is undefined
  tags: kpm

- name: check if KPM is already installed
  stat:
    path: "{{ kpm_install_dir }}/kpm-{{ kpm_version }}-linux-{{ ansible_architecture }}/kpm"
  register: kpm_bin
  tags: kpm

- name: install KPM
  become: true
  unarchive:
    src: "{{ nexus_url }}/content/repositories/{{ nexus_repository }}/org/kill-bill/billing/installer/kpm/{{ kpm_version }}/kpm-{{ kpm_version }}-linux-{{ ansible_architecture }}.tar.gz"
    remote_src: True
    dest: "{{ kpm_install_dir }}"
    owner: "{{ kpm_owner }}"
    group: "{{ kpm_group }}"
  when: kpm_bin.stat.exists == False
  tags: kpm

- name: symlink install directory
  become: true
  file: src="{{ kpm_install_dir }}/kpm-{{ kpm_version }}-linux-{{ ansible_architecture }}" path="{{ kpm_path }}" state=link
  tags: kpm

# The first time KPM is run, a Gemfile.lock needs to written out
- name: initialize KPM
  become: true
  command: |
    "{{ kpm_path }}/kpm" version
  args:
    creates: "{{ kpm_path }}/lib/vendor/Gemfile.lock"
  tags: kpm

# The individual files have the correct permissions already, but not the top directory
- name: set correct permissions
  become: true
  file: path="{{ kpm_install_dir }}/kpm-{{ kpm_version }}-linux-{{ ansible_architecture }}" owner={{ kpm_owner }} group={{ kpm_group }} recurse=yes
  tags: kpm
